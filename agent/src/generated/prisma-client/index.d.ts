// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  personalmsg: (where?: PersonalmsgWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  personalmsg: (where: PersonalmsgWhereUniqueInput) => PersonalmsgPromise;
  personalmsgs: (
    args?: {
      where?: PersonalmsgWhereInput;
      orderBy?: PersonalmsgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Personalmsg>;
  personalmsgsConnection: (
    args?: {
      where?: PersonalmsgWhereInput;
      orderBy?: PersonalmsgOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PersonalmsgConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPersonalmsg: (data: PersonalmsgCreateInput) => PersonalmsgPromise;
  updatePersonalmsg: (
    args: { data: PersonalmsgUpdateInput; where: PersonalmsgWhereUniqueInput }
  ) => PersonalmsgPromise;
  updateManyPersonalmsgs: (
    args: {
      data: PersonalmsgUpdateManyMutationInput;
      where?: PersonalmsgWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPersonalmsg: (
    args: {
      where: PersonalmsgWhereUniqueInput;
      create: PersonalmsgCreateInput;
      update: PersonalmsgUpdateInput;
    }
  ) => PersonalmsgPromise;
  deletePersonalmsg: (where: PersonalmsgWhereUniqueInput) => PersonalmsgPromise;
  deleteManyPersonalmsgs: (
    where?: PersonalmsgWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  personalmsg: (
    where?: PersonalmsgSubscriptionWhereInput
  ) => PersonalmsgSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PersonalmsgOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phonenumber_ASC"
  | "phonenumber_DESC"
  | "idnumber_ASC"
  | "idnumber_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "height_ASC"
  | "height_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "wechat_ASC"
  | "wechat_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreateWithoutPersonalmsgInput {
  wechat: String;
}

export type PersonalmsgWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PersonalmsgCreateWithoutUserInput {
  name: String;
  phonenumber: String;
  idnumber: String;
  gender: Int;
  height: Int;
  weight: Int;
  status: Int;
}

export interface UserUpsertWithoutPersonalmsgInput {
  update: UserUpdateWithoutPersonalmsgDataInput;
  create: UserCreateWithoutPersonalmsgInput;
}

export interface PersonalmsgCreateOneWithoutUserInput {
  create?: PersonalmsgCreateWithoutUserInput;
  connect?: PersonalmsgWhereUniqueInput;
}

export interface UserUpdateWithoutPersonalmsgDataInput {
  wechat?: String;
}

export interface UserCreateInput {
  wechat: String;
  personalmsg?: PersonalmsgCreateOneWithoutUserInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpdateManyMutationInput {
  wechat?: String;
}

export interface PersonalmsgUpdateWithoutUserDataInput {
  name?: String;
  phonenumber?: String;
  idnumber?: String;
  gender?: Int;
  height?: Int;
  weight?: Int;
  status?: Int;
}

export interface PersonalmsgCreateInput {
  name: String;
  phonenumber: String;
  idnumber: String;
  gender: Int;
  height: Int;
  weight: Int;
  status: Int;
  user: UserCreateOneWithoutPersonalmsgInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  wechat?: String;
}>;

export interface UserCreateOneWithoutPersonalmsgInput {
  create?: UserCreateWithoutPersonalmsgInput;
  connect?: UserWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  wechat?: String;
  wechat_not?: String;
  wechat_in?: String[] | String;
  wechat_not_in?: String[] | String;
  wechat_lt?: String;
  wechat_lte?: String;
  wechat_gt?: String;
  wechat_gte?: String;
  wechat_contains?: String;
  wechat_not_contains?: String;
  wechat_starts_with?: String;
  wechat_not_starts_with?: String;
  wechat_ends_with?: String;
  wechat_not_ends_with?: String;
  personalmsg?: PersonalmsgWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PersonalmsgWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  phonenumber?: String;
  phonenumber_not?: String;
  phonenumber_in?: String[] | String;
  phonenumber_not_in?: String[] | String;
  phonenumber_lt?: String;
  phonenumber_lte?: String;
  phonenumber_gt?: String;
  phonenumber_gte?: String;
  phonenumber_contains?: String;
  phonenumber_not_contains?: String;
  phonenumber_starts_with?: String;
  phonenumber_not_starts_with?: String;
  phonenumber_ends_with?: String;
  phonenumber_not_ends_with?: String;
  idnumber?: String;
  idnumber_not?: String;
  idnumber_in?: String[] | String;
  idnumber_not_in?: String[] | String;
  idnumber_lt?: String;
  idnumber_lte?: String;
  idnumber_gt?: String;
  idnumber_gte?: String;
  idnumber_contains?: String;
  idnumber_not_contains?: String;
  idnumber_starts_with?: String;
  idnumber_not_starts_with?: String;
  idnumber_ends_with?: String;
  idnumber_not_ends_with?: String;
  gender?: Int;
  gender_not?: Int;
  gender_in?: Int[] | Int;
  gender_not_in?: Int[] | Int;
  gender_lt?: Int;
  gender_lte?: Int;
  gender_gt?: Int;
  gender_gte?: Int;
  height?: Int;
  height_not?: Int;
  height_in?: Int[] | Int;
  height_not_in?: Int[] | Int;
  height_lt?: Int;
  height_lte?: Int;
  height_gt?: Int;
  height_gte?: Int;
  weight?: Int;
  weight_not?: Int;
  weight_in?: Int[] | Int;
  weight_not_in?: Int[] | Int;
  weight_lt?: Int;
  weight_lte?: Int;
  weight_gt?: Int;
  weight_gte?: Int;
  status?: Int;
  status_not?: Int;
  status_in?: Int[] | Int;
  status_not_in?: Int[] | Int;
  status_lt?: Int;
  status_lte?: Int;
  status_gt?: Int;
  status_gte?: Int;
  user?: UserWhereInput;
  AND?: PersonalmsgWhereInput[] | PersonalmsgWhereInput;
  OR?: PersonalmsgWhereInput[] | PersonalmsgWhereInput;
  NOT?: PersonalmsgWhereInput[] | PersonalmsgWhereInput;
}

export interface UserUpdateOneRequiredWithoutPersonalmsgInput {
  create?: UserCreateWithoutPersonalmsgInput;
  update?: UserUpdateWithoutPersonalmsgDataInput;
  upsert?: UserUpsertWithoutPersonalmsgInput;
  connect?: UserWhereUniqueInput;
}

export interface PersonalmsgUpdateInput {
  name?: String;
  phonenumber?: String;
  idnumber?: String;
  gender?: Int;
  height?: Int;
  weight?: Int;
  status?: Int;
  user?: UserUpdateOneRequiredWithoutPersonalmsgInput;
}

export interface PersonalmsgUpdateManyMutationInput {
  name?: String;
  phonenumber?: String;
  idnumber?: String;
  gender?: Int;
  height?: Int;
  weight?: Int;
  status?: Int;
}

export interface PersonalmsgSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonalmsgWhereInput;
  AND?: PersonalmsgSubscriptionWhereInput[] | PersonalmsgSubscriptionWhereInput;
  OR?: PersonalmsgSubscriptionWhereInput[] | PersonalmsgSubscriptionWhereInput;
  NOT?: PersonalmsgSubscriptionWhereInput[] | PersonalmsgSubscriptionWhereInput;
}

export interface UserUpdateInput {
  wechat?: String;
  personalmsg?: PersonalmsgUpdateOneWithoutUserInput;
}

export interface PersonalmsgUpdateOneWithoutUserInput {
  create?: PersonalmsgCreateWithoutUserInput;
  update?: PersonalmsgUpdateWithoutUserDataInput;
  upsert?: PersonalmsgUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PersonalmsgWhereUniqueInput;
}

export interface PersonalmsgUpsertWithoutUserInput {
  update: PersonalmsgUpdateWithoutUserDataInput;
  create: PersonalmsgCreateWithoutUserInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  wechat: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  wechat: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  wechat: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePersonalmsg {
  count: Int;
}

export interface AggregatePersonalmsgPromise
  extends Promise<AggregatePersonalmsg>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonalmsgSubscription
  extends Promise<AsyncIterator<AggregatePersonalmsg>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PersonalmsgSubscriptionPayload {
  mutation: MutationType;
  node: Personalmsg;
  updatedFields: String[];
  previousValues: PersonalmsgPreviousValues;
}

export interface PersonalmsgSubscriptionPayloadPromise
  extends Promise<PersonalmsgSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonalmsgPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonalmsgPreviousValuesPromise>() => T;
}

export interface PersonalmsgSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonalmsgSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonalmsgSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonalmsgPreviousValuesSubscription>() => T;
}

export interface PersonalmsgEdge {
  node: Personalmsg;
  cursor: String;
}

export interface PersonalmsgEdgePromise
  extends Promise<PersonalmsgEdge>,
    Fragmentable {
  node: <T = PersonalmsgPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonalmsgEdgeSubscription
  extends Promise<AsyncIterator<PersonalmsgEdge>>,
    Fragmentable {
  node: <T = PersonalmsgSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  wechat: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  wechat: () => Promise<String>;
  personalmsg: <T = PersonalmsgPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  wechat: () => Promise<AsyncIterator<String>>;
  personalmsg: <T = PersonalmsgSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Personalmsg {
  id: ID_Output;
  name: String;
  phonenumber: String;
  idnumber: String;
  gender: Int;
  height: Int;
  weight: Int;
  status: Int;
}

export interface PersonalmsgPromise extends Promise<Personalmsg>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phonenumber: () => Promise<String>;
  idnumber: () => Promise<String>;
  gender: () => Promise<Int>;
  height: () => Promise<Int>;
  weight: () => Promise<Int>;
  status: () => Promise<Int>;
  user: <T = UserPromise>() => T;
}

export interface PersonalmsgSubscription
  extends Promise<AsyncIterator<Personalmsg>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phonenumber: () => Promise<AsyncIterator<String>>;
  idnumber: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
}

export interface PersonalmsgConnection {
  pageInfo: PageInfo;
  edges: PersonalmsgEdge[];
}

export interface PersonalmsgConnectionPromise
  extends Promise<PersonalmsgConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonalmsgEdge>>() => T;
  aggregate: <T = AggregatePersonalmsgPromise>() => T;
}

export interface PersonalmsgConnectionSubscription
  extends Promise<AsyncIterator<PersonalmsgConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonalmsgEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonalmsgSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PersonalmsgPreviousValues {
  id: ID_Output;
  name: String;
  phonenumber: String;
  idnumber: String;
  gender: Int;
  height: Int;
  weight: Int;
  status: Int;
}

export interface PersonalmsgPreviousValuesPromise
  extends Promise<PersonalmsgPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phonenumber: () => Promise<String>;
  idnumber: () => Promise<String>;
  gender: () => Promise<Int>;
  height: () => Promise<Int>;
  weight: () => Promise<Int>;
  status: () => Promise<Int>;
}

export interface PersonalmsgPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonalmsgPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phonenumber: () => Promise<AsyncIterator<String>>;
  idnumber: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Personalmsg",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
