module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAttention {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorkcontent {
  count: Int!
}

type Attention {
  id: ID!
  userid: String!
  attention: String!
}

type AttentionConnection {
  pageInfo: PageInfo!
  edges: [AttentionEdge]!
  aggregate: AggregateAttention!
}

input AttentionCreateInput {
  userid: String!
  attention: String!
}

type AttentionEdge {
  node: Attention!
  cursor: String!
}

enum AttentionOrderByInput {
  id_ASC
  id_DESC
  userid_ASC
  userid_DESC
  attention_ASC
  attention_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AttentionPreviousValues {
  id: ID!
  userid: String!
  attention: String!
}

type AttentionSubscriptionPayload {
  mutation: MutationType!
  node: Attention
  updatedFields: [String!]
  previousValues: AttentionPreviousValues
}

input AttentionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AttentionWhereInput
  AND: [AttentionSubscriptionWhereInput!]
  OR: [AttentionSubscriptionWhereInput!]
  NOT: [AttentionSubscriptionWhereInput!]
}

input AttentionUpdateInput {
  userid: String
  attention: String
}

input AttentionUpdateManyMutationInput {
  userid: String
  attention: String
}

input AttentionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userid: String
  userid_not: String
  userid_in: [String!]
  userid_not_in: [String!]
  userid_lt: String
  userid_lte: String
  userid_gt: String
  userid_gte: String
  userid_contains: String
  userid_not_contains: String
  userid_starts_with: String
  userid_not_starts_with: String
  userid_ends_with: String
  userid_not_ends_with: String
  attention: String
  attention_not: String
  attention_in: [String!]
  attention_not_in: [String!]
  attention_lt: String
  attention_lte: String
  attention_gt: String
  attention_gte: String
  attention_contains: String
  attention_not_contains: String
  attention_starts_with: String
  attention_not_starts_with: String
  attention_ends_with: String
  attention_not_ends_with: String
  AND: [AttentionWhereInput!]
  OR: [AttentionWhereInput!]
  NOT: [AttentionWhereInput!]
}

input AttentionWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createAttention(data: AttentionCreateInput!): Attention!
  updateAttention(data: AttentionUpdateInput!, where: AttentionWhereUniqueInput!): Attention
  updateManyAttentions(data: AttentionUpdateManyMutationInput!, where: AttentionWhereInput): BatchPayload!
  upsertAttention(where: AttentionWhereUniqueInput!, create: AttentionCreateInput!, update: AttentionUpdateInput!): Attention!
  deleteAttention(where: AttentionWhereUniqueInput!): Attention
  deleteManyAttentions(where: AttentionWhereInput): BatchPayload!
  createProfile(data: ProfileCreateInput!): Profile!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWorkcontent(data: WorkcontentCreateInput!): Workcontent!
  updateWorkcontent(data: WorkcontentUpdateInput!, where: WorkcontentWhereUniqueInput!): Workcontent
  updateManyWorkcontents(data: WorkcontentUpdateManyMutationInput!, where: WorkcontentWhereInput): BatchPayload!
  upsertWorkcontent(where: WorkcontentWhereUniqueInput!, create: WorkcontentCreateInput!, update: WorkcontentUpdateInput!): Workcontent!
  deleteWorkcontent(where: WorkcontentWhereUniqueInput!): Workcontent
  deleteManyWorkcontents(where: WorkcontentWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Profile {
  id: ID!
  phone: String!
  companyname: String
  introduction: String
  user: User!
}

type ProfileConnection {
  pageInfo: PageInfo!
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  phone: String!
  companyname: String
  introduction: String
  user: UserCreateOneWithoutProfileInput!
}

input ProfileCreateOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutUserInput {
  phone: String!
  companyname: String
  introduction: String
}

type ProfileEdge {
  node: Profile!
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  phone_ASC
  phone_DESC
  companyname_ASC
  companyname_DESC
  introduction_ASC
  introduction_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProfilePreviousValues {
  id: ID!
  phone: String!
  companyname: String
  introduction: String
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
  AND: [ProfileSubscriptionWhereInput!]
  OR: [ProfileSubscriptionWhereInput!]
  NOT: [ProfileSubscriptionWhereInput!]
}

input ProfileUpdateInput {
  phone: String
  companyname: String
  introduction: String
  user: UserUpdateOneRequiredWithoutProfileInput
}

input ProfileUpdateManyMutationInput {
  phone: String
  companyname: String
  introduction: String
}

input ProfileUpdateOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  update: ProfileUpdateWithoutUserDataInput
  upsert: ProfileUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateWithoutUserDataInput {
  phone: String
  companyname: String
  introduction: String
}

input ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserDataInput!
  create: ProfileCreateWithoutUserInput!
}

input ProfileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  companyname: String
  companyname_not: String
  companyname_in: [String!]
  companyname_not_in: [String!]
  companyname_lt: String
  companyname_lte: String
  companyname_gt: String
  companyname_gte: String
  companyname_contains: String
  companyname_not_contains: String
  companyname_starts_with: String
  companyname_not_starts_with: String
  companyname_ends_with: String
  companyname_not_ends_with: String
  introduction: String
  introduction_not: String
  introduction_in: [String!]
  introduction_not_in: [String!]
  introduction_lt: String
  introduction_lte: String
  introduction_gt: String
  introduction_gte: String
  introduction_contains: String
  introduction_not_contains: String
  introduction_starts_with: String
  introduction_not_starts_with: String
  introduction_ends_with: String
  introduction_not_ends_with: String
  user: UserWhereInput
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
}

input ProfileWhereUniqueInput {
  id: ID
  phone: String
}

type Query {
  attention(where: AttentionWhereUniqueInput!): Attention
  attentions(where: AttentionWhereInput, orderBy: AttentionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attention]!
  attentionsConnection(where: AttentionWhereInput, orderBy: AttentionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttentionConnection!
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  workcontent(where: WorkcontentWhereUniqueInput!): Workcontent
  workcontents(where: WorkcontentWhereInput, orderBy: WorkcontentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workcontent]!
  workcontentsConnection(where: WorkcontentWhereInput, orderBy: WorkcontentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkcontentConnection!
  node(id: ID!): Node
}

type Subscription {
  attention(where: AttentionSubscriptionWhereInput): AttentionSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  workcontent(where: WorkcontentSubscriptionWhereInput): WorkcontentSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  phone: String
  password: String!
  profile: Profile
  wechat: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  phone: String
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  wechat: String
}

input UserCreateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProfileInput {
  name: String!
  email: String!
  phone: String
  password: String!
  wechat: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  wechat_ASC
  wechat_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  phone: String
  password: String!
  wechat: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  phone: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  wechat: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  phone: String
  password: String
  wechat: String
}

input UserUpdateOneRequiredWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  update: UserUpdateWithoutProfileDataInput
  upsert: UserUpsertWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutProfileDataInput {
  name: String
  email: String
  phone: String
  password: String
  wechat: String
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput!
  create: UserCreateWithoutProfileInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  profile: ProfileWhereInput
  wechat: String
  wechat_not: String
  wechat_in: [String!]
  wechat_not_in: [String!]
  wechat_lt: String
  wechat_lte: String
  wechat_gt: String
  wechat_gte: String
  wechat_contains: String
  wechat_not_contains: String
  wechat_starts_with: String
  wechat_not_starts_with: String
  wechat_ends_with: String
  wechat_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Workcontent {
  id: ID!
  userid: String!
  workcontent: String!
}

type WorkcontentConnection {
  pageInfo: PageInfo!
  edges: [WorkcontentEdge]!
  aggregate: AggregateWorkcontent!
}

input WorkcontentCreateInput {
  userid: String!
  workcontent: String!
}

type WorkcontentEdge {
  node: Workcontent!
  cursor: String!
}

enum WorkcontentOrderByInput {
  id_ASC
  id_DESC
  userid_ASC
  userid_DESC
  workcontent_ASC
  workcontent_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WorkcontentPreviousValues {
  id: ID!
  userid: String!
  workcontent: String!
}

type WorkcontentSubscriptionPayload {
  mutation: MutationType!
  node: Workcontent
  updatedFields: [String!]
  previousValues: WorkcontentPreviousValues
}

input WorkcontentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkcontentWhereInput
  AND: [WorkcontentSubscriptionWhereInput!]
  OR: [WorkcontentSubscriptionWhereInput!]
  NOT: [WorkcontentSubscriptionWhereInput!]
}

input WorkcontentUpdateInput {
  userid: String
  workcontent: String
}

input WorkcontentUpdateManyMutationInput {
  userid: String
  workcontent: String
}

input WorkcontentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userid: String
  userid_not: String
  userid_in: [String!]
  userid_not_in: [String!]
  userid_lt: String
  userid_lte: String
  userid_gt: String
  userid_gte: String
  userid_contains: String
  userid_not_contains: String
  userid_starts_with: String
  userid_not_starts_with: String
  userid_ends_with: String
  userid_not_ends_with: String
  workcontent: String
  workcontent_not: String
  workcontent_in: [String!]
  workcontent_not_in: [String!]
  workcontent_lt: String
  workcontent_lte: String
  workcontent_gt: String
  workcontent_gte: String
  workcontent_contains: String
  workcontent_not_contains: String
  workcontent_starts_with: String
  workcontent_not_starts_with: String
  workcontent_ends_with: String
  workcontent_not_ends_with: String
  AND: [WorkcontentWhereInput!]
  OR: [WorkcontentWhereInput!]
  NOT: [WorkcontentWhereInput!]
}

input WorkcontentWhereUniqueInput {
  id: ID
}
`
      }
    