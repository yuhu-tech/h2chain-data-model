// Code generated by Prisma (prisma@1.28.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  attention: (where?: AttentionWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  workcontent: (where?: WorkcontentWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  attention: (where: AttentionWhereUniqueInput) => AttentionPromise;
  attentions: (
    args?: {
      where?: AttentionWhereInput;
      orderBy?: AttentionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Attention>;
  attentionsConnection: (
    args?: {
      where?: AttentionWhereInput;
      orderBy?: AttentionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AttentionConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  profiles: (
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Profile>;
  profilesConnection: (
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProfileConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  workcontent: (where: WorkcontentWhereUniqueInput) => WorkcontentPromise;
  workcontents: (
    args?: {
      where?: WorkcontentWhereInput;
      orderBy?: WorkcontentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Workcontent>;
  workcontentsConnection: (
    args?: {
      where?: WorkcontentWhereInput;
      orderBy?: WorkcontentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WorkcontentConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAttention: (data: AttentionCreateInput) => AttentionPromise;
  updateAttention: (
    args: { data: AttentionUpdateInput; where: AttentionWhereUniqueInput }
  ) => AttentionPromise;
  updateManyAttentions: (
    args: {
      data: AttentionUpdateManyMutationInput;
      where?: AttentionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAttention: (
    args: {
      where: AttentionWhereUniqueInput;
      create: AttentionCreateInput;
      update: AttentionUpdateInput;
    }
  ) => AttentionPromise;
  deleteAttention: (where: AttentionWhereUniqueInput) => AttentionPromise;
  deleteManyAttentions: (where?: AttentionWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (
    args: { data: ProfileUpdateInput; where: ProfileWhereUniqueInput }
  ) => ProfilePromise;
  updateManyProfiles: (
    args: { data: ProfileUpdateManyMutationInput; where?: ProfileWhereInput }
  ) => BatchPayloadPromise;
  upsertProfile: (
    args: {
      where: ProfileWhereUniqueInput;
      create: ProfileCreateInput;
      update: ProfileUpdateInput;
    }
  ) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWorkcontent: (data: WorkcontentCreateInput) => WorkcontentPromise;
  updateWorkcontent: (
    args: { data: WorkcontentUpdateInput; where: WorkcontentWhereUniqueInput }
  ) => WorkcontentPromise;
  updateManyWorkcontents: (
    args: {
      data: WorkcontentUpdateManyMutationInput;
      where?: WorkcontentWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertWorkcontent: (
    args: {
      where: WorkcontentWhereUniqueInput;
      create: WorkcontentCreateInput;
      update: WorkcontentUpdateInput;
    }
  ) => WorkcontentPromise;
  deleteWorkcontent: (where: WorkcontentWhereUniqueInput) => WorkcontentPromise;
  deleteManyWorkcontents: (
    where?: WorkcontentWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  attention: (
    where?: AttentionSubscriptionWhereInput
  ) => AttentionSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  workcontent: (
    where?: WorkcontentSubscriptionWhereInput
  ) => WorkcontentSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "companyname_ASC"
  | "companyname_DESC"
  | "introduction_ASC"
  | "introduction_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AttentionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userid_ASC"
  | "userid_DESC"
  | "attention_ASC"
  | "attention_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "password_ASC"
  | "password_DESC"
  | "wechat_ASC"
  | "wechat_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WorkcontentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userid_ASC"
  | "userid_DESC"
  | "workcontent_ASC"
  | "workcontent_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AttentionUpdateInput {
  userid?: String;
  attention?: String;
}

export type AttentionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProfileUpdateOneWithoutUserInput {
  create?: ProfileCreateWithoutUserInput;
  update?: ProfileUpdateWithoutUserDataInput;
  upsert?: ProfileUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ProfileWhereUniqueInput;
}

export interface UserCreateOneWithoutProfileInput {
  create?: UserCreateWithoutProfileInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  phone?: String;
  password?: String;
  profile?: ProfileUpdateOneWithoutUserInput;
  wechat?: String;
}

export interface ProfileCreateInput {
  phone: String;
  companyname?: String;
  introduction?: String;
  user: UserCreateOneWithoutProfileInput;
}

export type WorkcontentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ProfileCreateWithoutUserInput {
  phone: String;
  companyname?: String;
  introduction?: String;
}

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  phone?: String;
}>;

export interface WorkcontentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userid?: String;
  userid_not?: String;
  userid_in?: String[] | String;
  userid_not_in?: String[] | String;
  userid_lt?: String;
  userid_lte?: String;
  userid_gt?: String;
  userid_gte?: String;
  userid_contains?: String;
  userid_not_contains?: String;
  userid_starts_with?: String;
  userid_not_starts_with?: String;
  userid_ends_with?: String;
  userid_not_ends_with?: String;
  workcontent?: String;
  workcontent_not?: String;
  workcontent_in?: String[] | String;
  workcontent_not_in?: String[] | String;
  workcontent_lt?: String;
  workcontent_lte?: String;
  workcontent_gt?: String;
  workcontent_gte?: String;
  workcontent_contains?: String;
  workcontent_not_contains?: String;
  workcontent_starts_with?: String;
  workcontent_not_starts_with?: String;
  workcontent_ends_with?: String;
  workcontent_not_ends_with?: String;
  AND?: WorkcontentWhereInput[] | WorkcontentWhereInput;
  OR?: WorkcontentWhereInput[] | WorkcontentWhereInput;
  NOT?: WorkcontentWhereInput[] | WorkcontentWhereInput;
}

export interface WorkcontentUpdateManyMutationInput {
  userid?: String;
  workcontent?: String;
}

export interface ProfileCreateOneWithoutUserInput {
  create?: ProfileCreateWithoutUserInput;
  connect?: ProfileWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  profile?: ProfileWhereInput;
  wechat?: String;
  wechat_not?: String;
  wechat_in?: String[] | String;
  wechat_not_in?: String[] | String;
  wechat_lt?: String;
  wechat_lte?: String;
  wechat_gt?: String;
  wechat_gte?: String;
  wechat_contains?: String;
  wechat_not_contains?: String;
  wechat_starts_with?: String;
  wechat_not_starts_with?: String;
  wechat_ends_with?: String;
  wechat_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  phone?: String;
  password: String;
  profile?: ProfileCreateOneWithoutUserInput;
  wechat?: String;
}

export interface WorkcontentCreateInput {
  userid: String;
  workcontent: String;
}

export interface ProfileUpdateManyMutationInput {
  phone?: String;
  companyname?: String;
  introduction?: String;
}

export interface ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserDataInput;
  create: ProfileCreateWithoutUserInput;
}

export interface UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput;
  create: UserCreateWithoutProfileInput;
}

export interface AttentionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userid?: String;
  userid_not?: String;
  userid_in?: String[] | String;
  userid_not_in?: String[] | String;
  userid_lt?: String;
  userid_lte?: String;
  userid_gt?: String;
  userid_gte?: String;
  userid_contains?: String;
  userid_not_contains?: String;
  userid_starts_with?: String;
  userid_not_starts_with?: String;
  userid_ends_with?: String;
  userid_not_ends_with?: String;
  attention?: String;
  attention_not?: String;
  attention_in?: String[] | String;
  attention_not_in?: String[] | String;
  attention_lt?: String;
  attention_lte?: String;
  attention_gt?: String;
  attention_gte?: String;
  attention_contains?: String;
  attention_not_contains?: String;
  attention_starts_with?: String;
  attention_not_starts_with?: String;
  attention_ends_with?: String;
  attention_not_ends_with?: String;
  AND?: AttentionWhereInput[] | AttentionWhereInput;
  OR?: AttentionWhereInput[] | AttentionWhereInput;
  NOT?: AttentionWhereInput[] | AttentionWhereInput;
}

export interface WorkcontentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WorkcontentWhereInput;
  AND?: WorkcontentSubscriptionWhereInput[] | WorkcontentSubscriptionWhereInput;
  OR?: WorkcontentSubscriptionWhereInput[] | WorkcontentSubscriptionWhereInput;
  NOT?: WorkcontentSubscriptionWhereInput[] | WorkcontentSubscriptionWhereInput;
}

export interface AttentionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AttentionWhereInput;
  AND?: AttentionSubscriptionWhereInput[] | AttentionSubscriptionWhereInput;
  OR?: AttentionSubscriptionWhereInput[] | AttentionSubscriptionWhereInput;
  NOT?: AttentionSubscriptionWhereInput[] | AttentionSubscriptionWhereInput;
}

export interface AttentionCreateInput {
  userid: String;
  attention: String;
}

export interface WorkcontentUpdateInput {
  userid?: String;
  workcontent?: String;
}

export interface UserUpdateWithoutProfileDataInput {
  name?: String;
  email?: String;
  phone?: String;
  password?: String;
  wechat?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserCreateWithoutProfileInput {
  name: String;
  email: String;
  phone?: String;
  password: String;
  wechat?: String;
}

export interface ProfileUpdateInput {
  phone?: String;
  companyname?: String;
  introduction?: String;
  user?: UserUpdateOneRequiredWithoutProfileInput;
}

export interface UserUpdateOneRequiredWithoutProfileInput {
  create?: UserCreateWithoutProfileInput;
  update?: UserUpdateWithoutProfileDataInput;
  upsert?: UserUpsertWithoutProfileInput;
  connect?: UserWhereUniqueInput;
}

export interface AttentionUpdateManyMutationInput {
  userid?: String;
  attention?: String;
}

export interface ProfileUpdateWithoutUserDataInput {
  phone?: String;
  companyname?: String;
  introduction?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  phone?: String;
  password?: String;
  wechat?: String;
}

export interface ProfileWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  companyname?: String;
  companyname_not?: String;
  companyname_in?: String[] | String;
  companyname_not_in?: String[] | String;
  companyname_lt?: String;
  companyname_lte?: String;
  companyname_gt?: String;
  companyname_gte?: String;
  companyname_contains?: String;
  companyname_not_contains?: String;
  companyname_starts_with?: String;
  companyname_not_starts_with?: String;
  companyname_ends_with?: String;
  companyname_not_ends_with?: String;
  introduction?: String;
  introduction_not?: String;
  introduction_in?: String[] | String;
  introduction_not_in?: String[] | String;
  introduction_lt?: String;
  introduction_lte?: String;
  introduction_gt?: String;
  introduction_gte?: String;
  introduction_contains?: String;
  introduction_not_contains?: String;
  introduction_starts_with?: String;
  introduction_not_starts_with?: String;
  introduction_ends_with?: String;
  introduction_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: ProfileWhereInput[] | ProfileWhereInput;
  OR?: ProfileWhereInput[] | ProfileWhereInput;
  NOT?: ProfileWhereInput[] | ProfileWhereInput;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProfileWhereInput;
  AND?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
  OR?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
  NOT?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WorkcontentPreviousValues {
  id: ID_Output;
  userid: String;
  workcontent: String;
}

export interface WorkcontentPreviousValuesPromise
  extends Promise<WorkcontentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userid: () => Promise<String>;
  workcontent: () => Promise<String>;
}

export interface WorkcontentPreviousValuesSubscription
  extends Promise<AsyncIterator<WorkcontentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userid: () => Promise<AsyncIterator<String>>;
  workcontent: () => Promise<AsyncIterator<String>>;
}

export interface AttentionConnection {
  pageInfo: PageInfo;
  edges: AttentionEdge[];
}

export interface AttentionConnectionPromise
  extends Promise<AttentionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttentionEdge>>() => T;
  aggregate: <T = AggregateAttentionPromise>() => T;
}

export interface AttentionConnectionSubscription
  extends Promise<AsyncIterator<AttentionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttentionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttentionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  phone?: String;
  password: String;
  wechat?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  profile: <T = ProfilePromise>() => T;
  wechat: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profile: <T = ProfileSubscription>() => T;
  wechat: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Profile {
  id: ID_Output;
  phone: String;
  companyname?: String;
  introduction?: String;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  phone: () => Promise<String>;
  companyname: () => Promise<String>;
  introduction: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phone: () => Promise<AsyncIterator<String>>;
  companyname: () => Promise<AsyncIterator<String>>;
  introduction: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface AggregateWorkcontent {
  count: Int;
}

export interface AggregateWorkcontentPromise
  extends Promise<AggregateWorkcontent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkcontentSubscription
  extends Promise<AsyncIterator<AggregateWorkcontent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Attention {
  id: ID_Output;
  userid: String;
  attention: String;
}

export interface AttentionPromise extends Promise<Attention>, Fragmentable {
  id: () => Promise<ID_Output>;
  userid: () => Promise<String>;
  attention: () => Promise<String>;
}

export interface AttentionSubscription
  extends Promise<AsyncIterator<Attention>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userid: () => Promise<AsyncIterator<String>>;
  attention: () => Promise<AsyncIterator<String>>;
}

export interface WorkcontentConnection {
  pageInfo: PageInfo;
  edges: WorkcontentEdge[];
}

export interface WorkcontentConnectionPromise
  extends Promise<WorkcontentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkcontentEdge>>() => T;
  aggregate: <T = AggregateWorkcontentPromise>() => T;
}

export interface WorkcontentConnectionSubscription
  extends Promise<AsyncIterator<WorkcontentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkcontentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkcontentSubscription>() => T;
}

export interface AttentionSubscriptionPayload {
  mutation: MutationType;
  node: Attention;
  updatedFields: String[];
  previousValues: AttentionPreviousValues;
}

export interface AttentionSubscriptionPayloadPromise
  extends Promise<AttentionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttentionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttentionPreviousValuesPromise>() => T;
}

export interface AttentionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttentionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttentionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttentionPreviousValuesSubscription>() => T;
}

export interface Workcontent {
  id: ID_Output;
  userid: String;
  workcontent: String;
}

export interface WorkcontentPromise extends Promise<Workcontent>, Fragmentable {
  id: () => Promise<ID_Output>;
  userid: () => Promise<String>;
  workcontent: () => Promise<String>;
}

export interface WorkcontentSubscription
  extends Promise<AsyncIterator<Workcontent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userid: () => Promise<AsyncIterator<String>>;
  workcontent: () => Promise<AsyncIterator<String>>;
}

export interface AttentionPreviousValues {
  id: ID_Output;
  userid: String;
  attention: String;
}

export interface AttentionPreviousValuesPromise
  extends Promise<AttentionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userid: () => Promise<String>;
  attention: () => Promise<String>;
}

export interface AttentionPreviousValuesSubscription
  extends Promise<AsyncIterator<AttentionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userid: () => Promise<AsyncIterator<String>>;
  attention: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAttention {
  count: Int;
}

export interface AggregateAttentionPromise
  extends Promise<AggregateAttention>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttentionSubscription
  extends Promise<AsyncIterator<AggregateAttention>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  node: Profile;
  updatedFields: String[];
  previousValues: ProfilePreviousValues;
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface ProfileConnection {
  pageInfo: PageInfo;
  edges: ProfileEdge[];
}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AttentionEdge {
  node: Attention;
  cursor: String;
}

export interface AttentionEdgePromise
  extends Promise<AttentionEdge>,
    Fragmentable {
  node: <T = AttentionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttentionEdgeSubscription
  extends Promise<AsyncIterator<AttentionEdge>>,
    Fragmentable {
  node: <T = AttentionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface WorkcontentEdge {
  node: Workcontent;
  cursor: String;
}

export interface WorkcontentEdgePromise
  extends Promise<WorkcontentEdge>,
    Fragmentable {
  node: <T = WorkcontentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkcontentEdgeSubscription
  extends Promise<AsyncIterator<WorkcontentEdge>>,
    Fragmentable {
  node: <T = WorkcontentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  phone?: String;
  password: String;
  wechat?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  wechat: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  wechat: () => Promise<AsyncIterator<String>>;
}

export interface ProfileEdge {
  node: Profile;
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkcontentSubscriptionPayload {
  mutation: MutationType;
  node: Workcontent;
  updatedFields: String[];
  previousValues: WorkcontentPreviousValues;
}

export interface WorkcontentSubscriptionPayloadPromise
  extends Promise<WorkcontentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkcontentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkcontentPreviousValuesPromise>() => T;
}

export interface WorkcontentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkcontentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkcontentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkcontentPreviousValuesSubscription>() => T;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  phone: String;
  companyname?: String;
  introduction?: String;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  phone: () => Promise<String>;
  companyname: () => Promise<String>;
  introduction: () => Promise<String>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phone: () => Promise<AsyncIterator<String>>;
  companyname: () => Promise<AsyncIterator<String>>;
  introduction: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Profile",
    embedded: false
  },
  {
    name: "Workcontent",
    embedded: false
  },
  {
    name: "Attention",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
